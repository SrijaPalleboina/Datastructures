#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}node;
node * front = 0;
node *rear = 0;
node *getnode();
void enqueue();
void dequeue();
void display();
void peek();
void main()
{
    int ch;
    while(1)
    {
        printf("\n1.enqueue \n2. dequeue \n3.display\n 4. peek");
        printf("\nenter your option");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("\ninsertion");
                    enqueue();
                    break;
            case 2 : printf("\ndeletion");
                     dequeue();
                     break;
            case 3 : printf("\ndisplay");
                     display();
                     break;
            case 4: printf("\nthe front element is");
                    peek();
                    break;
            case 5: exit(0);
		    break;
        }
    }
} 
node *getnode()
{
   
    node *new = (node*)malloc(sizeof(node));
    printf("\n enter the data");
    scanf("%d",&new->data);
    new->next =0;
    return new;
}
void enqueue()
{
    node *new= getnode();
    if(front==0 && rear==0)
    front = rear = new;
    else
    {
        rear->next = new;
        rear = new;
    }
    
}
void dequeue()
{
    node * temp = front;
    if(front == 0&& rear ==0)
    {
    printf("\nunderflow");
   
    }
    else
    {
        printf("\nthe deleted data is %d",front->data);
	if(front->next==NULL)
		front=rear=NULL;
	else
        front = front->next;
        free(temp);

    }
}
    
void display()
{
    node *temp1 =front;
    if(front==0 && rear==0)
    printf("\nthe list is empty");
    else
    {
        while(temp1!=0)
        {
            printf("%3d",temp1->data);
            temp1=temp1->next;
       }
    }
}
void peek()
{
    if(front==0 && rear==0)
    printf("\nthe list is empty");
    else
    printf(" %d",front->data);
}



